
package clases;

import java.awt.event.*;

/**
 *
 * @author Eduardo Martinez
 */
public class ETeclasJ extends KeyAdapter {

    static boolean w, s, up, down;

    @Override
    public void keyPressed(KeyEvent e) {

        int id = e.getKeyCode();
        if (id == KeyEvent.VK_W) {
            w = true;

        }
        if (id == KeyEvent.VK_S) {
            s = true;

        }
        if (id == KeyEvent.VK_UP) {
            up = true;
        }
        if (id == KeyEvent.VK_DOWN) {
            down = true;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {

        int id = e.getKeyCode();
        if (id == KeyEvent.VK_W) {
            w = false;
        }
        if (id == KeyEvent.VK_S) {
            s = false;
        }
        if (id == KeyEvent.VK_UP) {
            up = false;
        }
        if (id == KeyEvent.VK_DOWN) {
            down = false;
        }
    }

}

Despues esto
la siguiente clase en seguir es esta


package clases;

import clases.MesaJ;
import clases.PelotaJ;

/**
 *
 * @author Eduardo Martinez
 */
public class HiloJ extends Thread {

    private final MesaJ Base;//Objeto de la clase MesaJ

    public HiloJ(MesaJ Base) {//Constructor que lleva como`parametro un objeto de la clase MesaJ
        this.Base = Base;// Aqui lo instanciamos
    }

    @Override
    public void run() {
        while (!PelotaJ.GO) {
            Base.repaint();
            try {
                Thread.sleep(8);//Velocidad en la que se detiene el programa cada 8 milisegundo
            } catch (Exception ex) {
                System.out.println("Ocurrio Un Error En El Hilo: " + ex.getMessage());
            }
        }
    }
}




El siguiente es


package clases;

import java.awt.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JPanel;

/**
 *
 * @author Eduardo Martinez
 */
public class MesaJ extends JPanel {

    RacketJ ra1 = new RacketJ(10, 200);
    RacketJ ra2 = new RacketJ(794 - 10 - RacketJ.Ancho, 200);
    PelotaJ p = new PelotaJ();

    public MesaJ() {//Constructor
        this.setBackground(Color.CYAN);//Fondo de Color con el metodo setBackground
    }

    @Override
    public void paintComponent(Graphics h) {//Metodo sobreescrito paintComponent que pertenece a la clase Padre
        super.paintComponent(h);//Se ejecute el metodo paintComponent de la clase padre
        //Convertimos el objeto Graphics en Graphics2D
        Graphics2D h2 = (Graphics2D) h;//Objeto 2d, es una clase hija de la clase Graphics
        h2.setPaint(Color.MAGENTA);//Color de los objetos dentro del JPanel (Pelota, Raqueta)
        Puntaje(h2);
        dibujar(h2);

    }

    private void dibujar(Graphics2D h) {//Dibujamos los objetos
        //LLeva un parametro de tipo Graphics2D con nombre "h" porque pertenece a la clase padre
        Line2D.Double linea = new Line2D.Double(getBounds().getCenterX(), 0, getBounds().getCenterX(), getBounds().getMaxY());
        h.draw(linea);//Se dibuja o muestra la linea
        
        //Dibujamos la figura con el metodo fill
        h.fill(ra1.getRaqueta());//Como parametro debemos amndarle como tamaño getRaqueta
        Actualizar();

        h.fill(ra2.getRaqueta());
        Actualizar();

        h.fill(p.getPelota());//Como parametro debemos amndarle como tamaño getPelota
        Actualizar();
    }

    //actualiza el estado (posicion) de las raquetas y pelota)
    private void Actualizar() {

        p.moverPelota(getBounds(), colision(ra1.getRaqueta()), colision(ra2.getRaqueta()));

        ra1.moverR1(getBounds());
        ra2.moverR2(getBounds());
    }

    //detecta si existe una colision entre la raqueta y la pelota
    private boolean colision(Rectangle2D r) {
        return p.getPelota().intersects(r);
    }

    private void Puntaje(Graphics2D h) {
        Graphics2D h1 = h, h2 = h;
        Font Puntuacion = new Font("Times New Roman", Font.BOLD, 40);
        h.setFont(Puntuacion);

        h1.drawString(Integer.toString(p.getScore1()), (float) getBounds().getCenterX() - 50, 30);
        h2.drawString(Integer.toString(p.getScore2()), (float) getBounds().getCenterX() + 25, 30);
        if (p.getScore1() == 3) {
            h.drawString("   GANÓ El JUGADOR 1", (float) getBounds().getCenterX() - 180, (float) getBounds().getCenterY() - 100);
            PelotaJ.GO = true;
        }
        
        if (p.getScore2() == 3) {
            h.drawString("   GANÓ EL JUGADOR 2", (float) getBounds().getCenterX() - 180, (float) getBounds().getCenterY() - 100);
            PelotaJ.GO = true;
        }
    }

}


El que sigue despues es



package clases;

import java.applet.AudioClip;
import java.awt.geom.Rectangle2D;

/**
 *
 * @author Eduardo Martinez
*/
public class PelotaJ {

    private static final int Ancho = 15, Altura = 15;//Variables constantes
    private double a = 0;//La Variable a = x
    private static double b = 0;//La Variable b = y
    private double da = 1, db = 1;//Variables el cual se iran sumando con a y b
    private Integer Puntuacion1 = 0, Puntuacion2 = 0;
    public static boolean GO = false;//GO = GAME OVER
    
     SonidoJ audio = new SonidoJ();
     AudioClip rebote_1=audio.getAudio("/clases/rebote_pelota1.wav");
     AudioClip rebote_2=audio.getAudio("/clases/rebote_pelota2.wav");
    
    //retorna la pelota (Rectangle2D implementa la interface Pelota)
    public Rectangle2D getPelota() {
        return new Rectangle2D.Double(a, b, Ancho, Altura);
    }

    public void moverPelota(Rectangle2D limites, boolean colisionR1, boolean colisionR2) {
        //Le estamos dando movimiento a la pelota
        a += da;//A se suma a DA
        b += db;//B se suma a DB

        if (colisionR1) {//Debe existir una colision entre la Raqueta y la Pelota
            da = -da;////Para que cuando llegue al limite del JPanel rebote la pelota
            a = 20;
            rebote_1.play();//Reproduce el sonido si es verdadero la colision
        }
        
        if (colisionR2) {
            da = -da;//Para que cuando llegue al limite del JPanel rebote la pelota
            a = 755;
            rebote_1.play();//Reproduce el sonido si es verdadero la colision
        }

        //EN X
        if (a < limites.getMinX()) {//Para que al pasar la pelota le de el punto al otro jugador
            Puntuacion2++; //el puntaje del jugador2 aumenta en uno
           
            a = limites.getCenterX();
            b = limites.getCenterY();
            da = -da;
        }

        if (a + Ancho >= limites.getMaxX()) {//Para que al pasar la pelota le de el punto al otro jugador
            Puntuacion1++; //el puntaje del jugador1 aumenta en uno
            
            a = limites.getCenterX();
            b = limites.getCenterY();
            da = -da;
        }

        //EN Y
        if (b < limites.getMinY()) {

            b = limites.getMinY();

            db = -db;
            rebote_2.play();//Reproduce el sonido si es verdadero la colision
        }

        if (b + Altura >= limites.getMaxY()) {//Para que rebote al llegar al extremo en Y

            b = limites.getMaxY() - Altura;

            db = -db;
            rebote_2.play();//Reproduce el sonido si es verdadero la colision
        }

    }

    public int getScore1() {
        return Puntuacion1;
    }

    public int getScore2() {
        return Puntuacion2;
    }

    
    
}



el siguiente de este es


package clases;

import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;

/**
 *
 * @author Eduardo Martinez
 */
public class RacketJ {

    private int a, b;//a = x, y  b = y
    static final int Ancho = 20, Altura = 50;

    public RacketJ(int x, int y) {
        this.a = x;
        this.b = y;
    }

    public Rectangle2D getRaqueta() {
        return new Rectangle2D.Double(a, b, Ancho, Altura);
    }

    public void moverR1(Rectangle limites) {
        if (ETeclasJ.w && b > limites.getMinY()) {
            b--;
        }
        if (ETeclasJ.s && b < limites.getMaxY()-Altura) {
            b++;
        }
    }

    public void moverR2(Rectangle limites) {
        if (ETeclasJ.up && b > limites.getMinY()) {
            b--;
        }
        if (ETeclasJ.down && b < limites.getMaxY()-Altura) {
            b++;
        }
    }
}


El siguiente codigo es


package clases;

/**
 *
 * @author Eduardo Martinez
 */
import java.applet.AudioClip;

public class SonidoJ {

    public AudioClip getAudio(String direccion) {
        return java.applet.Applet.newAudioClip(getClass().getResource(direccion));
    }
   
}


Y la ultima clase a crear es la siguiente


package clases;

/**
 *
 * @author Eduardo Martinez
 */
import javax.swing.*;

public class VentanaJ extends JFrame {//Extendemos la clase JFrame

    MesaJ Base;//Objeto del JPanel
    private final int Ancho = 800, Altura = 500;//Variables Constantes
    PelotaJ p = new PelotaJ();

    public VentanaJ() {//Constructor
        setTitle("Game Ping-Pong ");//Titulo De La Ventana
        setSize(Ancho, Altura);//Tamaño de la ventana
        setLocationRelativeTo(null);//Metodo para la Ubicacion  de la ventana en el centro
        setResizable(false);//Metodo para Impedir modificar el tamaño de la ventana grafica.
        Base = new MesaJ();//Creamos el objeto de la Base
        add(Base);//y Añadimos al JFrame
        setVisible(true);//Hace visible la ventana
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// Termina todos los procesos y cierra el programa
        addKeyListener(new ETeclasJ());//Objeto para las pulsaciones de las teclas dadas
        new HiloJ(Base).start();//Iniamos el hilo
    }

}
